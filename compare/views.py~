from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render
from compare.models import Category, Mobile
from compare.forms import xyz

#def index(request):
#    category_list = Category.objects.all()
#    context_dict = {'categories': category_list}
#    return render(request, 'compare/index.htm', context_dict)

#def category(request, category_platform_slug):

    # Create a context dictionary which we can pass to the template rendering engine.
#    context_dict = {}

#    try:
        # Can we find a category name slug with the given name?
        # If we can't, the .get() method raises a DoesNotExist exception.
        # So the .get() method returns one model instance or raises an exception.
#        category = Category.objects.get(slug=category_platform_slug)
#        context_dict['category_platform'] = category.platform

        # Retrieve all of the associated mobiles.
        # Note that filter returns >= 1 model instance.
#        mobiles = mobile.objects.filter(category=category)

        # Adds our results list to the template context under name mobiles.
#        context_dict['mobiles'] = mobiles
        # We also add the category object from the database to the context dictionary.
        # We'll use this in the template to verify that the category exists.
#        context_dict['category'] = category
#    except Category.DoesNotExist:
        # We get here if we didn't find the specified category.
        # Don't do anything - the template displays the "no category" message for us.
#        pass

    # Go render the response and return it to the client.
#    return render(request, 'compare/category.htm', context_dict)

#def mobile(request):
#	return HttpResponse("working")

#	if request.method == "POST":
	
#		form = NameForm(request.POST)
	
#		if form.is_valid():
			#plat = form.cleaned_data['choice']
#			return HttpResponseRedirect('/thanks/')
		
		#return HttpResponseRedirect('compare/mobile/')
	
 #   	else:
    	
 #   		form = NameForm()
    	
#	return render(request, 'compare/index.htm', {'form': form})
	
	
#	context_dict = {'plat': plat}
	
#	return render(request, '/compare/mobile.htm', contex_dict)

#def get_name(request):

#    if request.method == 'POST':
        
#        form = NameForm(request.POST or None)
        
#        if form.is_valid():
            
#            return HttpResponseRedirect('/thanks/')


#    else:
#        form = NameForm()

#    return render(request, 'compare/index.htm', {'form': form})

#def get_name(request):
#   if request.method == 'POST':
#      form = NameForm(request.POST)
#      if form.is_valid():
#          return HttpResponseRedirect('/thanks/')

#   else:
#      form = NameForm()

#   return render(request, 'compare/index.htm', {'form': form})

def get_name(request):
   if request.method == 'POST':
      form = xyz(request.POST)

      if form.is_valid():

          plat = form.cleaned_data['Mobiles']
          
          #print plat
          #return HttpResponseRedirect("/display/")
          return display(request, plat)
          
          #context_dict = {'plat': plat}
          #return render(request, 'compare/mobile.htm', context_dict)
          #return mobile(context_dict)
          #return HttpResponseRedirect('/mobile/')

   else:
      form = xyz()

   return render(request, 'compare/index.htm', {'form': form})
   
#def mobile(context):
    #category_list = Category.objects.all()
#    context_dict = context
#    return render(context_dict, 'compare/mobile.htm', context_dict)

def display(request, plat):
	#c = Category.objects.all()
	#for c in Category.objects.all():
	#	print c
	#print
	#print plat
	#mobiles = Mobile.objects.filter(company=plat)
	#for a in mobiles:
	#	print "{0}".format(str(mobiles))
	#if mobiles. == plat:
	#for c in Category.objects.all():
	mobiles = []
	for c in Category.objects.filter(platform = plat):
	        for p in Mobile.objects.filter(category=c):
	            #print "{0}".format(str(p))
	            mobiles.append(str(p))
	print mobiles
        #print "working"
	#print {1} mobiles
	context_dict = {'plat': plat, 'mobiles': mobiles,}
	return render(request, 'compare/category.htm', context_dict);
